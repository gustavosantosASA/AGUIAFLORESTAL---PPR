import streamlit as st
import pandas as pd
from datetime import datetime
from utils.google_sheets import read_sheet_to_dataframe
from auth2 import authenticate_user, append_user_to_sheet

# --- Constantes ---
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1VZpV97NIhd16jAyzMpVE_8VhSs-bSqi4DXmySsx2Kc4/edit#gid=0"
USERS_SHEET = "Usu√°rios"
WORKSHEET_NAME = "Cronograma"


# --- Sess√£o ---
if "logged_in" not in st.session_state:
    st.session_state["logged_in"] = False

# --- L√™ dados da planilha ---
df_users = read_sheet_to_dataframe(SPREADSHEET_URL, USERS_SHEET)

# --- Autentica√ß√£o ---
if not st.session_state["logged_in"]:
    st.title("üîê Portal de Acesso")
    modo = st.radio("Escolha uma op√ß√£o:", ["Login", "Cadastrar Novo Usu√°rio"])

    if modo == "Login":
        login = st.text_input("Login")
        senha = st.text_input("Senha", type="password")

        if st.button("üîì Entrar"):
            user_info = authenticate_user(login, senha, df_users)
            if user_info:
                st.session_state["logged_in"] = True
                st.session_state["user_info"] = user_info
                st.session_state["email"] = user_info["Email"]
                st.session_state["tipo_usuario"] = user_info["Tipo de Usu√°rio"]
                st.success(f"Bem-vindo, {user_info['Login']}!")
                st.experimental_rerun()
            else:
                st.error("‚ùå Login ou senha inv√°lidos.")

    else:  # Cadastro
        with st.form("form_cadastro"):
            novo_login = st.text_input("Novo Login")
            novo_email = st.text_input("Email")
            nova_senha = st.text_input("Senha", type="password")
            tipo_usuario = st.selectbox("Tipo de Usu√°rio", ["Gestor | Avaliador", "Avaliador"])
            submit = st.form_submit_button("‚úÖ Cadastrar")

            if submit:
                if novo_login in df_users['Login'].values:
                    st.warning("‚ö†Ô∏è Este login j√° existe.")
                else:
                    data = datetime.today().strftime("%Y-%m-%d %H:%M:%S")
                    append_user_to_sheet([novo_login, novo_email, nova_senha, tipo_usuario, data])
                    st.success("‚úÖ Usu√°rio cadastrado com sucesso. Fa√ßa login na aba anterior.")
    st.stop()

# --- Conte√∫do do app principal (usu√°rio logado) ---
user_info = st.session_state["user_info"]
st.title("üìÖ Painel de Cronograma PPR")
st.write(f"üëã Bem-vindo, **{user_info['Login']}** ({user_info['Email']})")
st.write("Tipo de usu√°rio:", user_info["Tipo de Usu√°rio"])

# --- Bot√£o de logout ---
if st.button("üö™ Sair"):
    st.session_state.clear()
    st.experimental_rerun()


if 'sidebar_visible' not in st.session_state:
    st.session_state.sidebar_visible = False  # Come√ßa oculta



# Estilos CSS personalizados (cores: verde escuro #20643f e verde claro #40b049)
st.markdown("""
    <style>
        .header-style {
            font-size: 24px;
            font-weight: bold;
            color: #20643f;
            margin-bottom: 10px;
        }
        .subheader-style {
            font-size: 18px;
            font-weight: 600;
            color: #40b049;
            margin-bottom: 5px;
        }

        .card:hover {
            transform: translateY(-2px);
        }
        .status-box {
            border-left: 4px solid #40b049;
            padding-left: 10px;
            margin: 5px 0;
        }
        .filter-box {
            background-color: #f1f3f6;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            border-left: 4px solid #20643f;
        }
        .stButton>button {
            width: 100%;
            border-radius: 8px;
            padding: 8px 0;
            font-weight: 500;
            color: white;
            background-color: #40b049;
            border: none;
        }
        .stButton>button:hover {
            background-color: #20643f;
            transition: 0.3s;
        }
        .divider {
            margin: 20px 0;
            height: 1px;
            background: linear-gradient(90deg, transparent, #40b049, transparent);
        }
    </style>
""", unsafe_allow_html=True)

# Verifica√ß√£o de login
if not st.session_state.get("logged_in", False):
    st.warning("‚ö†Ô∏è Voc√™ precisa estar logado para acessar esta p√°gina.")

    if st.button("üîê Fazer login"):
        st.switch_page("pages/auth.py")  # Certifique-se de que o caminho est√° correto

    st.stop()

# Cabe√ßalho melhorado
st.markdown("<div class='header-style'>üìÖ Florestal | Cronograma PPR</div>", unsafe_allow_html=True)

# Barra de informa√ß√µes do usu√°rio
user_info = st.container()
with user_info:
    cols = st.columns([3, 3, 3, 1])
    with cols[0]:
        st.markdown(f"<div class='subheader-style'>üë§ Usu√°rio: {st.session_state.get('user_info', {}).get('Login', 'Desconhecido')}</div>", unsafe_allow_html=True)
    with cols[1]:
        st.markdown(f"<div class='subheader-style'>üìß E-mail: {st.session_state.get('email', 'Desconhecido')}</div>", unsafe_allow_html=True)
    with cols[2]:
        st.markdown(f"<div class='subheader-style'>üîë Tipo: {st.session_state.get('tipo_usuario', 'N√£o definido')}</div>", unsafe_allow_html=True)
    with cols[3]:
        if st.button("üîÑ Atualizar", help="Atualizar dados da planilha"):
            st.cache_data.clear()
            st.rerun()

# Carrega os dados
@st.cache_data(ttl=300)
def load_data():
    df = read_sheet_to_dataframe(SPREADSHEET_URL, WORKSHEET_NAME)
    
    # Verifica se o usu√°rio est√° logado e filtra pelo e-mail
    if "email" in st.session_state:
        user_email = str(st.session_state.email).strip().lower()

        #APLICAR L√ìGICA DE FILTRO
        df = df[df['E-mail'] == user_email]
    
    return df

df = load_data()

if df is not None:
    # --- SE√á√ÉO DE FILTROS DIN√ÇMICOS ---
    with st.expander("üîç Filtros Avan√ßados", expanded=True):
        with st.container():
            st.markdown("<div class='filter-box'>", unsafe_allow_html=True)
            
            # Fun√ß√£o auxiliar para op√ß√µes de filtro
            def get_filter_options(column, base_df):
                options = base_df[column].unique()
                return ["Todos"] + sorted(filter(None, set(str(x) for x in options)))

            # Layout dos filtros (3 colunas)
            col1, col2, col3 = st.columns(3)
            
            # Dicion√°rio para armazenar sele√ß√µes
            selections = {}
            
            with col1:
                selections['Refer√™ncia'] = st.selectbox(
                    "Refer√™ncia",
                    options=get_filter_options('Refer√™ncia', df),
                    index=0
                )
                
                temp_df = df[df['Refer√™ncia'] == selections['Refer√™ncia']] if selections['Refer√™ncia'] != "Todos" else df
                selections['Setor'] = st.selectbox(
                    "Setor",
                    options=get_filter_options('Setor', temp_df),
                    index=0
                )

            with col2:
                if selections['Setor'] != "Todos":
                    temp_df = temp_df[temp_df['Setor'] == selections['Setor']]
                
                selections['Respons√°vel'] = st.selectbox(
                    "Respons√°vel",
                    options=get_filter_options('Respons√°vel', temp_df),
                    index=0
                )
                
                if selections['Respons√°vel'] != "Todos":
                    temp_df = temp_df[temp_df['Respons√°vel'] == selections['Respons√°vel']]
                
                selections['Descri√ß√£o Meta'] = st.selectbox(
                    "Descri√ß√£o Meta",
                    options=get_filter_options('Descri√ß√£o Meta', temp_df),
                    index=0
                )

            with col3:
                if selections['Descri√ß√£o Meta'] != "Todos":
                    temp_df = temp_df[temp_df['Descri√ß√£o Meta'] == selections['Descri√ß√£o Meta']]
                
                selections['Respons√°vel √Årea'] = st.selectbox(
                    "Respons√°vel √Årea",
                    options=get_filter_options('Respons√°vel √Årea', temp_df),
                    index=0
                )
                
                if selections['Respons√°vel √Årea'] != "Todos":
                    temp_df = temp_df[temp_df['Respons√°vel √Årea'] == selections['Respons√°vel √Årea']]
                
                selections['E-mail'] = st.selectbox(
                    "E-mail",
                    options=get_filter_options('E-mail', temp_df),
                    index=0
                )
            
            st.markdown("</div>", unsafe_allow_html=True)

    # --- APLICA FILTROS ---
    filtered_df = df.copy()
    for col, val in selections.items():
        if val != "Todos":
            filtered_df = filtered_df[filtered_df[col] == val]
    
    # --- EXIBI√á√ÉO DOS RESULTADOS ---
    st.markdown("<div class='divider'></div>", unsafe_allow_html=True)
    st.markdown(f"<div class='header-style'>üìä Resultados: {len(filtered_df)} registros encontrados</div>", unsafe_allow_html=True)

    if not filtered_df.empty:
        for index, row in filtered_df.iterrows():
            with st.container():
                st.markdown("<div class='card'>", unsafe_allow_html=True)
                
                # Cabe√ßalho do card
                cols_header = st.columns([4, 1, 1, 1, 1, 1, 1])
                with cols_header[0]:
                    st.markdown(f"<div class='subheader-style'>üìë {row['Descri√ß√£o Meta']}</div>", unsafe_allow_html=True)
                
                # Conte√∫do principal
                cols_content = st.columns([4, 1, 1, 1, 1, 1, 1])
                
                with cols_content[0]:
                    st.markdown(f"""
                        <div class='status-box'>
                            <p><strong>Refer√™ncia:</strong> {row['Refer√™ncia']}</p>
                            <p><strong>Setor:</strong> {row['Setor']}</p>
                            <p><strong>Respons√°vel:</strong> {row['Respons√°vel']}</p>
                            <p><strong>Respons√°vel √Årea:</strong> {row['Respons√°vel √Årea']}</p>
                            <p><strong>E-mail:</strong> {row['E-mail']}</p>
                        </div>
                    """, unsafe_allow_html=True)
                
                # Colunas de entregas
                entregas = [
                    ('1¬∫ Entrega', '1¬∫ Avalia√ß√£o', 'Valida√ß√£o 1¬∫ Entrega', "pages/Entrega1.py"),
                    ('2¬∫ Entrega', '2¬∫ Avalia√ß√£o', 'Valida√ß√£o 2¬∫ Entrega', "pages/Entrega2.py"),
                    ('3¬∫ Entrega', '3¬∫ Avalia√ß√£o', 'Valida√ß√£o 3¬∫ Entrega', "pages/Entrega3.py"),
                    ('4¬∫ Entrega', '4¬∫ Avalia√ß√£o', 'Valida√ß√£o 4¬∫ Entrega', "pages/Entrega4.py"),
                    ('5¬∫ Entrega', '5¬∫ Avalia√ß√£o', 'Valida√ß√£o 5¬∫ Entrega', "pages/Entrega5.py"),
                    ('6¬∫ Entrega', '6¬∫ Avalia√ß√£o', 'Valida√ß√£o 6¬∫ Entrega', "pages/Entrega6.py")
                ]
                
                for i, (entrega, avaliacao, validacao, page) in enumerate(entregas, start=1):
                    with cols_content[i]:
                        st.markdown(f"""
                                        <div style="
                                            border: 1px solid #ccc;
                                            border-radius: 10px;
                                            padding: 16px;
                                            margin-bottom: 10px;
                                            box-shadow: 2px 2px 5px rgba(0,0,0,0.1);
                                            height: 180px;
                                            display: flex;
                                            flex-direction: column;
                                            justify-content: space-between;
                                            overflow: auto;  /* Adiciona scroll se necess√°rio */
                                        ">
                                            <p style="margin: 0;"><strong>{entrega.split('¬∫')[0]}¬∫ Entrega:</strong> {row[entrega]}</p>
                                            <p style="margin: 0;"><strong>‚Üí </strong> {row[avaliacao]}</p>
                                            <p style="margin: 0;"><strong>Status: </strong> {row[validacao]}</p>
                                        </div>
                                    """, unsafe_allow_html=True)
                        
                        if st.button(f"‚úèÔ∏è {entrega.split('¬∫')[0]}¬∫", key=f"editar_{i}_entrega_{index} Entrega"):
                            st.session_state.selected_row_index = index
                            st.switch_page(page)
                
                st.markdown("</div>", unsafe_allow_html=True)
                st.markdown("<div class='divider'></div>", unsafe_allow_html=True)
    else:
        st.warning("Nenhum registro encontrado com os filtros selecionados!")

elif df is not None and df.empty:
    st.warning("A planilha est√° vazia!")
else:
    st.error("‚ùå Falha ao carregar os dados. Verifique:")
    st.markdown("""
    - Conex√£o com a internet
    - Permiss√µes da planilha
    - Nome correto da aba ('Cronograma')
    - Configura√ß√£o do service account
    """)
